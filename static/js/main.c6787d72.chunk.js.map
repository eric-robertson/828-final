{"version":3,"sources":["components/explanation.tsx","controllers/color.ts","library/input/Button.tsx","library/input/ToggleSwitch.tsx","library/layout/Panel.tsx","library/layout/Row.tsx","components/questions.tsx","App.tsx","store/reducers/location.ts","store/store.ts","index.tsx"],"names":["Explanation","props","src","style","borderRadius","display","width","marginLeft","marginBottom","className","activeTheme","themes","light","text","text2","back","default","accept","warn","shadow","getTheme","Button","button_type","type","color","theme","useState","hover","setHover","click","setClick","height","fontWeight","textAlign","lineHeight","boxSizing","border","background","boxShadow","content","left","push","marginTop","length","children","justify","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onClick","ToggleSwitch","initialState","on","setOn","_color","fontSize","onToggle","Panel","margin","centerX","Row","justifyContent","Question","undefined","question","setQuestion","data","setData","selections","setSelections","submitting","setSubmitting","useEffect","fetch","method","then","r","select_some","a","q_true","q_false","max","total","results","used","i","id","Math","floor","random","q","truth","json","query","Key","uploaded_id","_data","JSON","parse","result","Item","console","log","scene","sim","simulation_id","start_time","Date","now","scene_questions","true_scene","false_scene","effect","effects","effect_questions","true_effects","false_effects","total_questions","true_total","false_total","position","top","zIndex","map","v","name","setTimeout","body","stringify","uploaded_time","answers","page","setPage","locationSlice","createSlice","reducers","changeLocation","state","action","payload","actions","store","configureStore","reducer","location","locationReducer","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.c6787d72.chunk.js","sourcesContent":["import React, { CSSProperties, useEffect, useState} from 'react';\n\ntype props = {}\n\nexport const Explanation = ( props : props) => {\n    return <div >\n        <br/>\n\n        <img src=\"1.png\" style={{borderRadius: 5, display: 'block', width:400, marginLeft: 150, marginBottom: 20}} />\n        Natural language models have advanced rapidly in recent years but still struggle with many everyday reasonings about the natural world.\n        Part of this deficit involves the understanding of physical objects and their movements. \n        This problem though is quite simply computed with off the shelf physics-engines which can easily \n        tell what physical actions will occur given a very specificly defined setup.\n\n        In this questionair you will be presented with a description of a physical scene involving shapes and attributes such as:\n\n        <div className=\"code\">\n        In a simulation, there is a cube (cube0), a ball, and another cube (cube2). They are placed above a bowl, the ball below of cube0, and cube2 above of cube0.\n        </div>\n\n        Then you will be presented with a list of statements about what occured. \n        Statements may be listed as \"At the start of the simulation\" speaking about very first moment or \"After a short time\", which adresses the first secconds.\n\n        For example, an object placed in mid-air will begin moving immediately, assuming it has gravity and thus the following sentence should be marked as true.\n\n        <div className=\"code\">\n        At the start of the simulation, it is reasonable that the ball is moving\n        </div>\n\n        You will be asked to mark each one as true or false. \n        Statements may be vague or confusing as they are mostly auto-generated, do not over think it. You may leave answers blank if you want.\n\n        There may be follow up questions with changing conditions like so:\n        <div className=\"code\">\n        The ball is then given a push to the left\n        </div>\n\n        At the end, click the submit button and you will be given another question.\n        Repeat for as long as you want, there are over 300 questions. You do not need to do them all.\n\n    </div>\n\n}\n","type ThemeMap = {[k:string] : ColorTheme}\ninterface ColorTheme {\n    text : string\n    text2 : string,\n    back : [string, string]\n    default : [string, string, string]\n    accept : [string, string, string]\n    warn : [string, string, string],\n    shadow : string\n}\n\nlet activeTheme = 'light' \nlet themes : ThemeMap = {\n    light : {\n        text:\"#424446\",\n        text2:\"#FFFFFF\",\n        back:[\"#fffefa\", \"#fdfaec\"],\n        default:[\"#435FFD\",\"#2C47E0\",\"#1D37CA\"],\n        accept: [\"#58E492\",\"#19EB89\",\"#0D9E5A\"],\n        warn:[\"#FD7B7B\",\"#F93838\",\"#961414\"],\n        shadow : \"#888888\"\n    }\n}\n\n\nexport function setTheme ( color : string ) {\n    activeTheme = color\n}\n\nexport function getTheme (){ \n    return themes[activeTheme]\n}","import React, { CSSProperties, useState } from 'react';\nimport { getTheme } from '../../controllers/color';\nimport { Row } from '../_';\n\ntype props = {\n    text ?: string,\n    left ?: any,\n    type ?: 'solid' | 'outline' | 'hidden'\n    color ?: 'default' | 'warn' | 'accept'\n    justify ?: string\n    width ?: any\n    onClick : () => void,\n    style?: any\n}\n\nexport const Button = ( props : props) => {\n\n    let button_type = props.type ?? 'solid' \n    let color = props.color ?? 'default'\n    let theme = getTheme()\n\n    // Set style\n\n    const [hover, setHover] = useState(false)\n    const [click, setClick] = useState(false)\n\n    const style = {\n        height: 35,\n        fontWeight: 600,\n        textAlign: 'center',\n        lineHeight: '32px',\n        boxSizing: 'border-box',\n        color: button_type == 'solid' ? theme.text2 : theme.text,\n        border : `2px solid transparent`,\n        width : props.width,\n        ...props.style\n    } as CSSProperties\n\n    if ( !hover && !click) {\n        if ( button_type == 'solid' )\n            style.background = theme[color][0]\n        else if ( button_type == 'outline' )\n            style.border = `2px solid ${theme[color][0]}`\n\n    }\n    if ( hover ) {\n        if ( button_type == 'solid' ){\n            style.background = theme[color][1]\n            style.boxShadow = `${theme.shadow} 0px 0px 10px 0px`\n        }\n        else if ( button_type == 'outline' ) {\n            style.background = theme.back[0]\n            style.border = `2px solid ${theme[color][1]}`\n            style.boxShadow = `${theme.shadow} 0px 0px 4px 0px`\n        }\n        else if ( button_type == 'hidden' ) {\n            style.background = theme.back[1]\n        }\n    }\n    if ( click ) {\n        if ( button_type == 'solid' ){\n            style.background = theme[color][2]\n        }\n        else if ( button_type == 'outline' ) {\n            style.border = `2px solid ${theme[color][2]}`\n        }\n        else if ( button_type == 'hidden' ) {\n            style.background = theme.back[1]\n            style.border = `2px solid ${theme[color][2]}`\n        }\n    }\n\n    // Set content\n\n    let content = [] as React.ReactNode[];\n\n    if ( props.left && typeof(props.left) == 'string' )\n        content.push(<img src={props.left} width={29} height={29} style={{marginTop:1}} key=\"img-str\"/>)\n    if ( props.left && typeof(props.left) != 'string' )\n        content.push(<div key=\"img-obj\">{props.left}</div>)\n    if ( props.text ) \n        content.push(<div key=\"text\">{props.text}</div>)\n\n    if ( content.length > 1 )\n        content = [<Row key=\"row\" children={content} justify={props.justify}></Row>]\n\n    // Set button\n\n    return <div\n        className=\"round animate clickable spaceSmall stretchWidth unselectable\"\n        onMouseEnter={()=>setHover(true)}\n        onMouseLeave={()=>{setHover(false); setClick(false)}}\n        onMouseDown={()=>{setHover(false); setClick(true)}}\n        onMouseUp={()=>{setClick(false); setHover(true); props.onClick() }}\n        style={style}\n    >\n        {content}\n    </div>\n\n\n}\n","import React, {useState, CSSProperties} from \"react\";\nimport { getTheme } from \"../../controllers/color\";\n\ntype props = {\n    initialState : boolean\n    color ?: 'default' | 'warn' | 'accept'\n    onToggle : (state:boolean) => void\n}\n\nexport const ToggleSwitch = (props : props) => {\n    let color = props.color ?? 'default'\n    let theme = getTheme()\n\n    let [on, setOn] = useState(props.initialState)\n    const [hover, setHover] = useState(false)\n    const [click, setClick] = useState(false)\n\n    let _color = theme[color]\n\n    let style = {\n        height: 24,\n        width: 24,\n        border: `2px solid ${theme[color][0]}`,\n        background : theme.back[0],\n        textAlign: 'center',\n        lineHeight: '23px',\n        fontSize: '14pt',\n        display: 'inline-block',\n        color: theme.text2\n    } as CSSProperties\n\n    const toggleState = () => {\n        setOn(!on)\n        props.onToggle(!on)\n    }\n\n\n    if ( hover || click ) {\n        style.boxShadow = `${theme.shadow} 0px 0px 4px 0px`\n    }\n    if ( click ) {\n    }\n    if ( on ) {\n        style.background = _color[0]\n    }\n\n\n    return <div \n        className=\"round animate clickable spaceSmall unselectable\"\n        style={style} \n        onMouseEnter={()=>setHover(true)}\n        onMouseLeave={()=>{setHover(false); setClick(false)}}\n        onMouseDown={()=>{setHover(false); setClick(true)}}\n        onMouseUp={()=>{setClick(false); setHover(true); toggleState() }}>\n            {on?'✔':'✔'}\n    </div>\n}","import React, { CSSProperties, useState } from 'react';\n\ntype props = {\n    children: React.ReactNode\n    width: any\n    height ?: any,\n    margin ?: any,\n    style ?: any\n    centerX ?: boolean\n}\n\nexport const Panel = ( props : props) => {\n\n    const style = {\n        width : props.width,\n        height : props.height,\n        margin : props.margin,\n        ...props.style\n    } as CSSProperties\n\n    if ( props.centerX )\n        style.marginLeft = `calc(50% - ${props.width/2}px)`\n\n    return <div \n        className=\"padSmall\"\n        style={style} \n    >\n        {props.children}\n    </div>\n\n\n}\n","import React, { CSSProperties, useState } from 'react';\n\ntype props = {\n    children: React.ReactNode[],\n    justify ?: string\n    width ?: any\n    style ?: any\n}\n\nexport const Row = ( props : props) => {\n\n    const style = {\n        display: 'flex',\n        justifyContent: props.justify ?? 'space-evenly',\n        width : props.width,\n        ...props.style\n    } as CSSProperties\n\n    return <div style={style} > \n        {props.children}\n    </div>\n\n\n}\n","import React, { CSSProperties, useEffect, useState} from 'react';\nimport { Button, ToggleSwitch } from '../library/_';\n\ntype props = {}\ntype data = {\n    scene : string,\n    effect : string,\n    sim : string,\n    scene_questions : {q:string,truth:boolean}[],\n    effect_questions: {q:string,truth:boolean}[],\n    total_questions: {q:string,truth:boolean}[],\n}\n\n\nexport const Question = ( props : props) => {\n\n    let [question, setQuestion] = useState(undefined)\n    let [data, setData] = useState(undefined as data | undefined)\n    let [selections, setSelections] = useState({} as any)\n    let [submitting, setSubmitting] = useState(\"\")\n\n    useEffect(()=>{\n\n        if ( !question )\n            fetch('https://i2wb9qwl7h.execute-api.us-east-1.amazonaws.com/getQuestion', {\n                method: 'post'\n            })\n            .then(async (r) => {\n                let content = await r.json()\n                setQuestion(content.query.Key.uploaded_id)\n                let _data = JSON.parse(content.result).Item\n\n                function select_some (q_true : string[], q_false : string[]) {\n                    if ( ! q_true || ! q_false ) return []\n                    let max = q_true.length + q_false.length\n                    let total = max > 6 ? 6 : max\n                    let results = [] as {q:string,truth:boolean}[]\n                    let used = {} as any\n                    for ( let i = 0; i < total; i ++ ) {\n                        let id = Math.floor(Math.random()*max)\n                        if ( used[id] ) continue\n                        used[id] = true\n                        if ( id <q_true.length)\n                            results.push({\n                                q : q_true[id],\n                                truth: true\n                            })\n                        else \n                            results.push({\n                                q : q_false[id - q_true.length],\n                                truth: false\n                            })\n                    }\n                    return results\n                }\n\n                console.log(_data)\n\n                const data = {\n                    scene : _data.scene,\n                    sim : _data.simulation_id,\n                    start_time: Date.now(),\n                    scene_questions : select_some(\n                        _data.true_scene,\n                        _data.false_scene\n                    ),\n                    effect : _data.effects,\n                    effect_questions : select_some(\n                        _data.true_effects,\n                        _data.false_effects\n                    ),\n                    total_questions : select_some(\n                        _data.true_total,\n                        _data.false_total\n                    ),\n                } as data\n\n                setData(data)\n            })\n\n    }, [question])\n\n    if ( !question )\n        return <div style={{textAlign: 'center', width: 700, margin: 20}}>\n            Loading Question ...\n        </div>\n\n    console.log(selections)\n\n    return <div >\n        {\n            submitting.length != 0 ? <div style={{\n                position: 'fixed', top : 0, left : 0, width : '100%', height: '100%', textAlign: 'center', lineHeight: \"100vh\",\n                background : '#79797961', zIndex: 10, fontSize: 50, }}>\n                {submitting}\n            </div> : ''\n        }\n        <div style={{textAlign: 'center', width: 700, margin: 20}}>\n            Question {question}\n        </div>\n\n\n        <div className=\"code\">\n            {data?.scene}\n        </div>\n\n        {\n            data?.scene_questions.map( (q,i) => {\n                return <div key={i} style={{position:'relative'}}>\n                    <ToggleSwitch initialState={false} onToggle={(v)=>{\n                        let name = 'scene-' + i\n                        if (v)\n                            selections[name] = true\n                        else\n                            delete selections[name]\n                        setSelections({...selections})\n                    }} />\n                    <div style={{position: 'absolute', top: 12, left: 50}}>{q.q}</div>\n                </div>\n            })\n        }\n\n        { \n            data?.effect ? (\n                <div>\n        \n                <div className=\"code\">\n                    {data?.effect}\n                </div>\n                \n                {\n                    data?.effect_questions.map( (q,i) => {\n                        return <div key={i} style={{position:'relative'}}>\n                            <ToggleSwitch initialState={false} onToggle={(v)=>{\n                                let name = 'effect-' + i\n                                if (v)\n                                    selections[name] = true\n                                else\n                                    delete selections[name]\n                                setSelections({...selections})\n                            }} />\n                            <div style={{position: 'absolute', top: 12, left: 50}}>{q.q}</div>\n                        </div>\n                    })\n                }\n                <div className=\"code\">\n                    Across the entire scene, including the initial values and the later changes\n                </div>\n                \n                {\n                    data?.total_questions.map( (q,i) => {\n                        return <div key={i} style={{position:'relative'}}>\n                            <ToggleSwitch initialState={false} onToggle={(v)=>{\n                                let name = 'total-' + i\n                                if (v)\n                                    selections[name] = true\n                                else\n                                    delete selections[name]\n                                setSelections({...selections})\n                            }} />\n                            <div style={{position: 'absolute', top: 12, left: 50}}>{q.q}</div>\n                        </div>\n                    })\n                }\n                </div>\n            ) : '' \n\n        }\n\n        <Button color=\"accept\" text=\"Submit\" onClick={()=>{\n\n            setSubmitting(\"Submitting . . .\")\n            setTimeout(() => {\n                fetch(\" https://i2wb9qwl7h.execute-api.us-east-1.amazonaws.com/answerQuestion\", {\n                    method : 'POST',\n                    body : JSON.stringify({\n                        uploaded_time : \"\" + Date.now(),\n                        ...data,\n                        answers : [selections]\n                    })\n                }).then(() => {\n                    setSubmitting('Success!')\n                    setTimeout(() => {\n                        setQuestion(undefined)\n                        setSubmitting(\"\")\n                    }, 500)\n                })\n            }, 500)\n\n\n        }} width={400} style={{marginLeft:150}}/>\n\n\n    </div>\n\n}\n","import React, { useState, useEffect } from 'react';\nimport { Outlet } from 'react-router';\nimport { Explanation } from './components/explanation';\nimport { Question } from './components/questions';\nimport { Button, Panel } from './library/_';\n\ntype props = {\n    children : React.ReactNode\n}\n\nexport default function() {\n\n    const [page, setPage] = useState(true)\n\n    let text = page ? \"Start Answering Questions\" : \"Back to Explanation\"\n    let content = page ? <Explanation/> : <Question/>\n\n    return <div>\n        <Panel centerX width={400} style={{textAlign: 'center', fontSize: 30}}>\n            828J Data Collection\n        </Panel>\n        <Panel centerX width={700} >\n            {content}\n        </Panel>\n        <br/>\n        <br/>\n        <br/>\n        <Panel centerX width={400}>\n            <Button text={text} onClick={()=>{\n                setPage(!page)\n            }} width={380}/>\n        </Panel>\n    </div>\n}\n\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../store';\n\nexport interface LocationState {\n\tpage: string[];\n}\n\nconst initialState: LocationState = {\n\tpage: [''],\n};\n\nexport const locationSlice = createSlice({\n\tname: 'location',\n\tinitialState,\n\treducers: {\n        changeLocation: (state, action: PayloadAction<string[]>) => {\n            state.page = action.payload\n        },\n\t}\n});\n\nexport const { changeLocation } = locationSlice.actions;\n\nexport const selectLocation = (state: RootState) => state.location.page;\n\nexport default locationSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport locationReducer from './reducers/location';\n\nexport const store = configureStore({\n\treducer: {\n\t\tlocation: locationReducer,\n\t},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n\tReturnType,\n\tRootState,\n\tunknown,\n\tAction<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\n\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}